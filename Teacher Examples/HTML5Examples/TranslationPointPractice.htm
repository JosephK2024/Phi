<!DOCTYPE html>
<!-- saved from url=(0049)https://sites.google.com/site/math2share/students -->
<html>
<head>

</head>

<body>

<canvas id="CANVAS1" width="800" height="560" style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>
<br>
<canvas id="CANVAS2" width="650" height="80" style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>

<table style="float: left;">
  <tr>
  <td>
    <input type="button" value="Draw" class="draw"     onClick="draw_random_points_for_translation_quiz();" style="font-size:150%;font-weight:bold;" /><br>
    <input type="button" value="Answer" class="answer" onClick="update_answer_box();" style="font-size:150%;font-weight:bold;" />
  </td>
  </tr>
</table>

<script type="text/javascript">

//
//Javascript to randomly draw points on a
//   coordinate plane to quiz translations
//

//Initialize Global Constants and Variables
var LINE_WIDTH = "3"; //pixel width of lines
var EDGE_BUFFER = 10; //pixel space to leave on edge for buffer
var ARROW_SIZE = 20; //pixel size for arrow heads
var ARROW_ANGLE = Math.PI / 6.0; //angle for arrow heads
var AnswerString = "";

//Initialize Canvases
var CANVAS1 = document.getElementById("CANVAS1");
var C1XMAX = CANVAS1.width; //width of CANVAS1
var C1YMAX = CANVAS1.height; //height of CANVAS1
var C1CTX = CANVAS1.getContext("2d");
var CANVAS2 = document.getElementById("CANVAS2");
var C2XMAX = CANVAS2.width; //width of CANVAS2
var C2YMAX = CANVAS2.height; //height of CANVAS2
var C2CTX = CANVAS2.getContext("2d");

//Move over CANVAS2 to the right
CANVAS2.style.position="absolute";
var canvasoffset = CANVAS1.width - CANVAS2.width + 8;
CANVAS2.style.left= canvasoffset.toString() + "px";

//
// Javascript Function Definitions:
//

function randomize_labels( labels )
// Function to randomize a given array of labels.
{
    
    var tempval = "";
    var len_labels = labels.length;
    var ranNum = 0;
    //Randomly switch index values within a loop
    for (var i=0; i<len_labels; i++)
    {
        for (var j=0; j<=len_labels-1; j++)
        {
           ranNum = Math.floor(Math.random()*len_labels);
           tempval = labels[j];
           labels[j] = labels[ranNum];
           labels[ranNum] = tempval;
        }
    }
    return labels;

} //end randomize_labels

function draw_coordinate_axes_and_grid( pixels_per_unit, 
                                        x_origin, y_origin )
// Function to draw the coordinate axes along with grid
// Argument pixels_per_unit is required.
// If x_origin and/or y_origin not given, assumed to be
//   the center of the canvas.

{
   //Alert if pixels_per_unit argument is not provided
   if( pixels_per_unit === undefined )
   {
       alert("Error: function draw_coordinate_axes_and_grid requires the number of pixels per graph unit to be provided.");
       return;
   }

   //Set up origin point for line if not provided
   if(!x_origin)
   {
       var x_origin = Math.floor( C1XMAX / 2);
   }
   if(!y_origin)
   {
       var y_origin = Math.floor( C1YMAX / 2);
   }

   //Initialize x-axis endpoint coordinates (include buffer)
   var x_left = EDGE_BUFFER; 
   var y_left = y_origin; 
   var x_right = C1XMAX - EDGE_BUFFER; 
   var y_right = y_origin;     
             
   //Draw x-axis line
   C1CTX.beginPath();
   C1CTX.lineWidth = LINE_WIDTH * 2;
   C1CTX.strokeStyle="#999999"; 
   C1CTX.moveTo( x_left  , y_left );
   C1CTX.lineTo( x_right , y_right );
   C1CTX.stroke();

   //
   //Draw x-axis arrows
   //
   C1CTX.beginPath();
   C1CTX.lineWidth = LINE_WIDTH * 1.5;
   //left side
   C1CTX.moveTo( x_left + ARROW_SIZE * Math.cos(ARROW_ANGLE), y_left + ARROW_SIZE * Math.sin(ARROW_ANGLE) );
   C1CTX.lineTo( x_left , y_left );
   C1CTX.lineTo( x_left + ARROW_SIZE * Math.cos(-1*ARROW_ANGLE), y_left + ARROW_SIZE * Math.sin(-1*ARROW_ANGLE) );
   //right side
   C1CTX.moveTo( x_right + ARROW_SIZE * Math.cos(Math.PI + ARROW_ANGLE), 
                 y_right + ARROW_SIZE * Math.sin(Math.PI + ARROW_ANGLE) );
   C1CTX.lineTo( x_right , y_right );
   C1CTX.lineTo( x_right + ARROW_SIZE * Math.cos(Math.PI - ARROW_ANGLE), 
                 y_right + ARROW_SIZE * Math.sin(Math.PI - ARROW_ANGLE) );
   C1CTX.stroke();

   //Add x-axis label
   C1CTX.font="italic 32px cursive";
   C1CTX.fillStyle="#999999"; 
   C1CTX.textAlign="center"; 
   C1CTX.textBaseline="middle"; 
   C1CTX.fillText("x", x_right-10, y_right+20);

   //Initialize y-axis endpoint coordinates (include buffer)
   var x_top = x_origin; 
   var y_top = EDGE_BUFFER; 
   var x_bottom = x_origin; 
   var y_bottom = C1YMAX - EDGE_BUFFER;     
             
   //Draw y-axis line
   C1CTX.beginPath();
   C1CTX.lineWidth = LINE_WIDTH * 2;
   C1CTX.strokeStyle="#999999"; 
   C1CTX.moveTo( x_top  , y_top );
   C1CTX.lineTo( x_bottom , y_bottom );
   C1CTX.stroke();

   //
   //Draw y-axis arrows
   //
   C1CTX.beginPath();
   C1CTX.lineWidth = LINE_WIDTH * 1.5;
   //top
   C1CTX.moveTo( x_top + ARROW_SIZE * Math.sin(ARROW_ANGLE), y_top + ARROW_SIZE * Math.cos(ARROW_ANGLE) );
   C1CTX.lineTo( x_top , y_top );
   C1CTX.lineTo( x_top + ARROW_SIZE * Math.sin(-1*ARROW_ANGLE), y_top + ARROW_SIZE * Math.cos(-1*ARROW_ANGLE) );
   //bottom
   C1CTX.moveTo( x_bottom + ARROW_SIZE * Math.sin(Math.PI + ARROW_ANGLE), 
                 y_bottom + ARROW_SIZE * Math.cos(Math.PI + ARROW_ANGLE) );
   C1CTX.lineTo( x_bottom , y_bottom );
   C1CTX.lineTo( x_bottom + ARROW_SIZE * Math.sin(Math.PI - ARROW_ANGLE), 
                 y_bottom + ARROW_SIZE * Math.cos(Math.PI - ARROW_ANGLE) );
   C1CTX.stroke();

   //Add y-axis label
   C1CTX.font="italic 32px cursive";
   C1CTX.fillStyle="#999999"; 
   C1CTX.textAlign="center"; 
   C1CTX.textBaseline="middle"; 
   C1CTX.fillText("y", x_top+20, y_top+10);

   //Draw gridlines parallel to x-axis
   var x_grid = x_origin + pixels_per_unit;
   while ( x_grid <= ( C1XMAX - EDGE_BUFFER ) )
   {
     //Draw gridline
     C1CTX.beginPath();
     C1CTX.lineWidth = LINE_WIDTH * 0.75;
     C1CTX.moveTo( x_grid , EDGE_BUFFER );
     C1CTX.lineTo( x_grid , C1YMAX - EDGE_BUFFER );
     C1CTX.stroke();
     x_grid = x_grid + pixels_per_unit;
   }
   x_grid = x_origin - pixels_per_unit;
   while ( x_grid >= EDGE_BUFFER )
   {
     //Draw gridline
     C1CTX.beginPath();
     C1CTX.lineWidth = LINE_WIDTH * 0.75;
     C1CTX.moveTo( x_grid , EDGE_BUFFER );
     C1CTX.lineTo( x_grid , C1YMAX - EDGE_BUFFER );
     C1CTX.stroke();
     x_grid = x_grid - pixels_per_unit;
   }

   //Draw gridlines parallel to y-axis
   var y_grid = y_origin - pixels_per_unit;
   while ( y_grid >= EDGE_BUFFER )
   {
     //Draw gridline
     C1CTX.beginPath();
     C1CTX.lineWidth = LINE_WIDTH * 0.75;
     C1CTX.moveTo( EDGE_BUFFER, y_grid );
     C1CTX.lineTo( C1XMAX - EDGE_BUFFER, y_grid );
     C1CTX.stroke();
     y_grid = y_grid - pixels_per_unit;
   }
   y_grid = y_origin + pixels_per_unit;
   while ( y_grid <= ( C1YMAX - EDGE_BUFFER ) )
   {
     //Draw gridline
     C1CTX.beginPath();
     C1CTX.lineWidth = LINE_WIDTH * 0.75;
     C1CTX.moveTo( EDGE_BUFFER, y_grid );
     C1CTX.lineTo( C1XMAX - EDGE_BUFFER, y_grid );
     C1CTX.stroke();
     y_grid = y_grid + pixels_per_unit;
   }

} //end draw_coordinate_axes_and_grid

function draw_new_point( x_value, y_value, point_label)
// Function to draw a point within the CANVAS.
// If x_origin and/or y_origin not given, assumed to be
//   the center of the canvas.
// point_label is an optional label for the point on the circle
// No return value
{

   //Set up point at origin if coordinates not provided
   if(! x_value)
   {
       var x_value = Math.floor( C1XMAX / 2);
   }
   if(! y_value)
   {
       var y_value = Math.floor( C1YMAX / 2);
   }

   //
   //Draw point
   //
   C1CTX.beginPath();
   C1CTX.fillStyle="black"; 
   C1CTX.arc(x_value,y_value,8,0,2.0*Math.PI,true);
   C1CTX.fill();

   //Label point if requested
   if( point_label != undefined )
   {
       C1CTX.save(); //save current state of canvas settings
       C1CTX.font="italic 38px cursive";
       C1CTX.fillStyle="blue"; 
       C1CTX.textAlign="center"; 
       C1CTX.textBaseline="middle"; 
       var label_dist = 32;
       var label_angle = 2; //up and right of the point
       var x_label = x_value - 
                     label_dist*Math.cos(label_angle);
       var y_label = y_value - 
                     label_dist*Math.sin(label_angle);
       
       C1CTX.fillText(point_label, x_label, y_label);

       C1CTX.restore(); //restore previous canvas settings

   }

   return;

} //end draw_new_point

function draw_random_points_for_translation_quiz( )
// Function to setup coordinate plane and draw random points for 
//     translation quiz.
{

    //Clear canvases
    C1CTX.clearRect(0, 0, C1XMAX, C1YMAX);
    C2CTX.clearRect(0, 0, C2XMAX, C2YMAX);

    //Find an origin point somewhat near center of canvas
    var x_origin = Math.floor( C1XMAX/2 );
    var y_origin = Math.floor( C1YMAX/2 );

    //define min and max y values (x values to keep grid square)
    var y_min = -6;
    var y_max = 6;

    //determine the pixel width of a coordinate axis unit
    var pixels_per_unit = Math.floor(C1YMAX / (y_max - y_min));
    
    draw_coordinate_axes_and_grid( pixels_per_unit, 
                                   x_origin, y_origin );

    //Draw 2 random points on the coordinate plane
    var x_interval = C1XMAX / pixels_per_unit - 2;
    var y_interval = (y_max - y_min) - 2;
    var x_point1 = Math.floor( Math.random() * x_interval -
                               x_interval/2 );
    var y_point1 = Math.floor( Math.random() * y_interval -
                               y_interval/2 );
    var x_point2 = Math.floor( Math.random() * x_interval -
                               x_interval/2 );
    var y_point2 = Math.floor( Math.random() * y_interval -
                               y_interval/2 );


    //possible point labels
    var point_labels = new Array("A", "B", "C", "D", "J", "K", "L", "M", "W", "X", "Y", "Z");
    point_labels = randomize_labels( point_labels );    

    //Draw Points
    draw_new_point( x_origin + ( x_point1 * pixels_per_unit), 
                    y_origin - ( y_point1 * pixels_per_unit), 
                    point_labels[1] );
    draw_new_point( x_origin + ( x_point2 * pixels_per_unit), 
                    y_origin - ( y_point2 * pixels_per_unit), 
                    point_labels[2] );
    
    //Update Question Output
    C2CTX.save(); //save current state of canvas settings
    C2CTX.font="26px serif";
    C2CTX.textAlign="left"; 
    C2CTX.textBaseline="alphabetic"; 

    var text1 = "Describe the translation from Point ";
    var text1start = 10;
    C2CTX.fillText(text1,text1start,30);
    var text2 = point_labels[1];
    var text2start = text1start + C2CTX.measureText(text1).width;
    C2CTX.font="italic 30px cursive"
    C2CTX.fillText(text2,text2start,30);
    var text3 = " to Point ";
    var text3start = text2start + C2CTX.measureText(text2).width;
    C2CTX.font="26px serif"
    C2CTX.fillText(text3,text3start,30);
    var text4 = point_labels[2];
    var text4start = text3start + C2CTX.measureText(text3).width;
    C2CTX.font="italic 30px cursive"
    C2CTX.fillText(text4,text4start,30);

    C2CTX.restore(); //restore previous canvas settings

    //Update Answer String
    var x_vector = x_point2 - x_point1;
    var y_vector = y_point2 - y_point1;
    var x_string = "";
    var y_string = "";
    if (x_vector < 0)
    {
        x_string = "Left " + -1*x_vector;
    }
    else if (x_vector > 0)
    {
        x_string = "Right " + x_vector;
    }
    if (y_vector < 0)
    {
        if (x_string != "")
        {
           x_string = x_string + " and ";
        }
        y_string = "Down " + -1*y_vector;
    }
    else if (y_vector > 0)
    {
        if (x_string != "")
        {
           x_string = x_string + " and ";
        }
        y_string = "Up " + y_vector;
    }

    
    AnswerString = x_string + y_string + 
                   " OR <" + x_vector + ", " + y_vector + ">";

} //end draw_random_points_for_translation_quiz

function update_answer_box( )
// Function to update the answer box canvas
{
    
    C2CTX.font="26px serif";
    C2CTX.textAlign="left"; 
    C2CTX.textBaseline="alphabetic"; 

    C2CTX.fillText(AnswerString,10,65);

} //end update_answer_box

</script>

</body>
</html>