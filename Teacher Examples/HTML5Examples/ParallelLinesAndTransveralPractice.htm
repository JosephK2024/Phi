<!DOCTYPE html>
<!-- saved from url=(0049)https://sites.google.com/site/math2share/students -->
<html>
<head>

</head>

<body>

<canvas id="CANVAS1" width="800" height="560" style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>
<br>
<canvas id="CANVAS2" width="650" height="80" style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>

<table style="float: left;">
  <tr>
  <td>
    <input type="button" value="Draw" class="draw"     onClick="draw_random_parallel_transversal();" style="font-size:150%;font-weight:bold;" /><br>
    <input type="button" value="Answer" class="answer" onClick="update_answer_box();" style="font-size:150%;font-weight:bold;" />
  </td>
  </tr>
</table>

<script type="text/javascript">

//
//Javascript to randomly draw two parallel lines 
//   and a transveral and quiz on angle relations
//

//Initialize Global Constants and Variables
var LINE_WIDTH = "3"; //pixel width of lines
var EDGE_BUFFER = 30; //pixel space to leave on edge for buffer
var ARROW_SIZE = 20; //pixel size for arrow heads
var ARROW_ANGLE = Math.PI / 6.0; //angle for arrow heads
var AnswerString = "";

//Initialize Canvases
var CANVAS1 = document.getElementById("CANVAS1");
var C1XMAX = CANVAS1.width; //width of CANVAS1
var C1YMAX = CANVAS1.height; //height of CANVAS1
var C1CTX = CANVAS1.getContext("2d");
var CANVAS2 = document.getElementById("CANVAS2");
var C2XMAX = CANVAS2.width; //width of CANVAS2
var C2YMAX = CANVAS2.height; //height of CANVAS2
var C2CTX = CANVAS2.getContext("2d");

//Move over CANVAS2 to the right
CANVAS2.style.position="absolute";
var canvasoffset = CANVAS1.width - CANVAS2.width + 8;
CANVAS2.style.left= canvasoffset.toString() + "px";

//
// Javascript Function Definitions:
//

function randomize_labels( labels )
// Function to randomize a given array of labels.
{
    
    var tempval = "";
    var len_labels = labels.length;
    var ranNum = 0;
    //Randomly switch index values within a loop
    for (var i=0; i<len_labels; i++)
    {
        for (var j=0; j<=len_labels-1; j++)
        {
           ranNum = Math.floor(Math.random()*len_labels);
           tempval = labels[j];
           labels[j] = labels[ranNum];
           labels[ranNum] = tempval;
        }
    }
    return labels;

} //end randomize_labels

function random_angle( maxAngle )
// Function to randomly generate an angle.
// Angle is in radians from 0 to maxAngle.
// If argument in not given, maxAngle is assumed to be pi
{
    
    //Set up maxAngle if not given as argument
    if(!maxAngle)
    {
        var maxAngle = Math.PI;
    }
    
    var ranAngle = Math.random() * maxAngle;
    return ranAngle;

} //end random_angle

function draw_new_line( line_angle, x_origin, y_origin, 
                        line_label)
// Function to draw a line within the CANVAS.
// Argument line_angle is required.
// If x_origin and/or y_origin not given, assumed to be
//   the center of the canvas.
// line_label is an optional label for the line
// Returns slope (in radians) of line
{
    //Alert if line_angle argument is not provided
    if( line_angle === undefined )
    {
        alert("Error: function draw_new_line requires the line angle to be provided.");
        return;
    }

    //Set up origin point for line if not provided
    if(!x_origin)
    {
        var x_origin = Math.floor( C1XMAX / 2);
    }
    if(!y_origin)
    {
        var y_origin = Math.floor( C1YMAX / 2);
    }

    //Initialize line endpoint coordinates
    var x_left = 0; //x coordinate of left point of line
    var y_left = 0; //y coordinate of left point of line
    var x_right = C1XMAX; //x coordinate of right point
    var y_right = C1YMAX; //x coordinate of right point

    //
    //Determine Left Point for Line
    //
    y_left = y_origin + x_origin * Math.tan( line_angle );
    //Check if passed canvas limits
    if( y_left >= 0)
    {
        if ( y_left > C1YMAX ) // else use current values
        {
        // y_left was greater than canvas maximum height
            x_left = x_origin + 
                (C1YMAX - y_origin) / Math.tan( -1*line_angle );
            y_left = C1YMAX;        
        }
    }
    else // y_left was negative
    {
        x_left = x_origin + y_origin / Math.tan( line_angle );
        y_left = 0;
    }

    //
    //Determine Right Point for Line
    //
    y_right = y_origin - 
          (C1XMAX - x_origin) * Math.tan( line_angle );
    //Check if passed canvas limits
    if( y_right >= 0)
    {
        if ( y_right > C1YMAX ) // else use current values 
        {
        // y_right was greater than canvas maximum height
            x_right = x_origin + 
                (C1YMAX - y_origin) / Math.tan( -1*line_angle );
            y_right = C1YMAX;

        }
    }
    else // y_right was negative
    {
        x_right = x_origin + y_origin / Math.tan( line_angle );
        y_right = 0;
    }
        
    //
    //Determine endpoint coordinates with canvas buffer
    //
    //First recalc line_angle using existing endpoints
    line_angle = Math.atan2( y_right-y_left, x_right-x_left );
    var x_bleft = x_left + EDGE_BUFFER * Math.cos(line_angle);
    var y_bleft = y_left + EDGE_BUFFER * Math.sin(line_angle);
    var x_bright = x_right - EDGE_BUFFER * Math.cos(line_angle);
    var y_bright = y_right - EDGE_BUFFER * Math.sin(line_angle);
        
    //Draw line
    C1CTX.beginPath();
    C1CTX.lineWidth = LINE_WIDTH;
    C1CTX.moveTo( x_bleft , y_bleft );
    C1CTX.lineTo( x_bright , y_bright );
    C1CTX.stroke();

    //
    //Calculate left arrow head start coordinates & draw arrow
    //
    var x_aleft = x_bleft - 
        ARROW_SIZE * Math.cos(ARROW_ANGLE) * Math.cos(line_angle);
    var y_aleft = y_bleft - 
        ARROW_SIZE * Math.cos(ARROW_ANGLE) * Math.sin(line_angle);
    C1CTX.beginPath();
    C1CTX.moveTo( x_aleft , y_aleft );
    C1CTX.lineTo( x_aleft + ARROW_SIZE * Math.cos(line_angle+ARROW_ANGLE), y_aleft + ARROW_SIZE * Math.sin(line_angle+ARROW_ANGLE) );
    C1CTX.lineTo( x_aleft + ARROW_SIZE * Math.cos(line_angle-ARROW_ANGLE), y_aleft + ARROW_SIZE * Math.sin(line_angle-ARROW_ANGLE) );
    C1CTX.closePath();
    C1CTX.fill();

    //
    //Calculate right arrow head start coordinates & draw arrow
    //
    var x_aright = x_bright + 
        ARROW_SIZE * Math.cos(ARROW_ANGLE) * Math.cos(line_angle);
    var y_aright = y_bright + 
        ARROW_SIZE * Math.cos(ARROW_ANGLE) * Math.sin(line_angle);
    C1CTX.beginPath();
    C1CTX.moveTo( x_aright , y_aright );
    C1CTX.lineTo( x_aright + ARROW_SIZE * Math.cos(line_angle+Math.PI+ARROW_ANGLE), 
                  y_aright + ARROW_SIZE * Math.sin(line_angle+Math.PI+ARROW_ANGLE) );
    C1CTX.lineTo( x_aright + ARROW_SIZE * Math.cos(line_angle+Math.PI-ARROW_ANGLE), 
                  y_aright + ARROW_SIZE * Math.sin(line_angle+Math.PI-ARROW_ANGLE) );
    C1CTX.closePath();
    C1CTX.fill();

    //Label line if requested
    if( line_label != undefined )
    {
        C1CTX.save(); //save current state of canvas settings
        C1CTX.font="italic 40px cursive";
        C1CTX.fillStyle="red"; 
        C1CTX.textAlign="center"; 
        C1CTX.textBaseline="middle"; 
        var label_dist1 = 30; //backwards
        var label_dist2 = 25; //perpendicular
        var label_angle1 = line_angle + Math.PI;
        var label_angle2 = line_angle - Math.PI/2.0;
        var x_label = x_bright + 
                      label_dist2*Math.cos(label_angle1) + 
                      label_dist2*Math.cos(label_angle2);
        var y_label = y_bright + 
                      label_dist1*Math.sin(label_angle1) +
                      label_dist2*Math.sin(label_angle2);

        //Check if label would be within boundary of canvas
        //and, if so, use other side of line
        if ( (x_label - (x_left + EDGE_BUFFER) < 0.0)  ||
             ((x_right - EDGE_BUFFER) - x_label < 0.0) ||
             (y_label - (y_left + EDGE_BUFFER) < 0.0)  ||
             ((y_right - EDGE_BUFFER) - y_label < 0.0) )
        {
            //follow the opposite angle to move away from the line
            var b1 = (x_label - (x_left + EDGE_BUFFER) < 0.0); 
            var b2 = ((x_right - EDGE_BUFFER) - x_label < 0.0);
            var b3 = (y_label - (y_left + EDGE_BUFFER) < 0.0);
            var b4 = ((y_right - EDGE_BUFFER) - y_label < 0.0);
            label_angle2 = line_angle + Math.PI/2.0;
            x_label = x_bright + 
                      label_dist2*Math.cos(label_angle1) + 
                      label_dist2*Math.cos(label_angle2);
            y_label = y_bright + 
                      label_dist1*Math.sin(label_angle1) +
                      label_dist2*Math.sin(label_angle2);
        }

        C1CTX.fillText(line_label, x_label, y_label);

        C1CTX.restore(); //restore previous canvas settings

    }

    return line_angle;

} //end draw_new_line

function draw_random_parallel_transversal( )
// Function to draw two parallel lines with a random angle and a transversal.
{
    //possible line labels for each line
    var line_labels = new Array("l", "m", "n", "r", "s", "t");
    line_labels = randomize_labels( line_labels );
    
    //Find random angle for first line
    var line_angle = random_angle( Math.PI );

    //Find an origin point somewhat near center of canvas
    var x1_origin = Math.floor( C1XMAX/2 + 
             0.15*C1XMAX*(Math.random()-0.5) );
    var y1_origin = Math.floor( C1YMAX/2 + 
             0.15*C1YMAX*(Math.random()-0.5) );

    //Clear canvases
    C1CTX.clearRect(0, 0, C1XMAX, C1YMAX);
    C2CTX.clearRect(0, 0, C2XMAX, C2YMAX);

    //Draw the first line
    var line1_slope = draw_new_line( line_angle, 
                                     x1_origin, 
                                     y1_origin, 
                                     line_labels[0] );

    //Find slope of line perpendicular to first line
    var perp_slope = line1_slope + Math.PI / 2.0

    //
    //Calculate and draw the parallel line
    //
    //Calculate a random distance between the parallel lines
    var random_dist = 0.2*Math.min(C1YMAX,C1XMAX) + 
               0.15*Math.min(C1YMAX,C1XMAX)*Math.random();
    //Find the new origin coordinates for parallel line
    var randomsign = 1;
    if ( Math.random() > 0.5 )
    {
        randomsign = -1;
    }
    var xp_origin = x1_origin + 
               randomsign * random_dist * Math.cos(perp_slope);
    var yp_origin = y1_origin + 
               randomsign * random_dist * Math.sin(perp_slope);
    //Draw parallel line
    draw_new_line( line_angle, xp_origin, yp_origin, line_labels[1] );

    //
    //Calculate and draw transversal
    //
    //Use original line angle
    var transverse_angle = line_angle + Math.PI/2.0;
    if ( line_angle >= (Math.PI/2.0) )
    {
        transverse_angle = line_angle - Math.PI/2.0;
    }
    //randomly change the slope of the transverse line
    transverse_angle = transverse_angle + 
          (Math.PI / 4.0)*(Math.random() - 0.5);
    var trans_slope = draw_new_line( transverse_angle, 
                                     x1_origin, 
                                     y1_origin, 
                                     line_labels[2] );

    //
    //Find other intersection point
    //
    var transversal_dist = random_dist / Math.cos(perp_slope - trans_slope);
    var x2_origin = x1_origin + 
          randomsign * transversal_dist * Math.cos(trans_slope);
    var y2_origin = y1_origin + 
          randomsign * transversal_dist * Math.sin(trans_slope);

    //
    //Determine which intersection point is on the left
    //
    var x1_intersection = x1_origin;
    var y1_intersection = y1_origin;
    var x2_intersection = x2_origin;
    var y2_intersection = y2_origin;
    //switch intersection points if otherwise
    if ( x1_origin > x2_origin )
    {
        x1_intersection = x2_origin;
        y1_intersection = y2_origin;
        x2_intersection = x1_origin;
        y2_intersection = y1_origin;
    }

    //
    //Label intersection points
    //
    C1CTX.save(); //save current state of canvas settings
    C1CTX.font="45px serif";
    C1CTX.fillStyle='blue';
    C1CTX.textAlign="center"; 
    C1CTX.textBaseline="middle"; 
    var label_dist = 35;

    var angle1 = (line1_slope + trans_slope + 2.0*Math.PI) / 2;
    var angle2 = (line1_slope + trans_slope + Math.PI) / 2;        
    var angle3 = (line1_slope + trans_slope + 3.0*Math.PI) / 2;
    var angle4 = (line1_slope + trans_slope) / 2;

    //Rotate clockwise pi/2 so that angle 1 and 2
    //remain external angles
    //Slope of angle 1 and 2 label positions should be
    //closest to the slope of the parallel lines and 
    //not the transversal
    var label1_2_angle = Math.atan2( 
                 Math.sin(angle2) - Math.sin(angle1) , 
                 Math.cos(angle2) - Math.cos(angle1) );
    if ( (label1_2_angle-trans_slope) < 
         (label1_2_angle-line1_slope)    )
    {
        angle1 = angle1 + Math.PI/2;
        angle2 = angle2 + Math.PI/2;
        angle3 = angle3 + Math.PI/2;
        angle4 = angle4 + Math.PI/2;
    }
    
    var angle_labels = new Array("1", "2", "3", "4", "5", "6",                       
                                 "7", "8");
    angle_labels = randomize_labels( angle_labels );

    //Choose which type of angle to quiz on
    var qtype = Math.floor((Math.random()*5)+1);
    switch(qtype)
    {
        case 1: //Corresponding Angles (fall-through to increase frequency of being tested)
        case 2: //Corresponding Angles
            var random_pair = Math.floor((Math.random()*4)+1);
            if (random_pair == 1) //Angles 1 and 5
            {
                C1CTX.fillText(angle_labels[0], 
                  x1_intersection+label_dist*Math.cos(angle1), 
                  y1_intersection+label_dist*Math.sin(angle1));
                C1CTX.fillText(angle_labels[4], 
                  x2_intersection+label_dist*Math.cos(angle1), 
                  y2_intersection+label_dist*Math.sin(angle1));
                AnswerString = "Corresponding Angles (congruent)";
            }
            if (random_pair == 2) //Angles 2 and 6
            {     
                C1CTX.fillText(angle_labels[1], 
                  x1_intersection+label_dist*Math.cos(angle2), 
                  y1_intersection+label_dist*Math.sin(angle2));
                C1CTX.fillText(angle_labels[5], 
                  x2_intersection+label_dist*Math.cos(angle2), 
                  y2_intersection+label_dist*Math.sin(angle2));
                AnswerString = "Corresponding Angles (congruent)";
            }
            if (random_pair == 3) //Angles 3 and 7
            {     
                C1CTX.fillText(angle_labels[2], 
                  x1_intersection+label_dist*Math.cos(angle3), 
                  y1_intersection+label_dist*Math.sin(angle3));
                C1CTX.fillText(angle_labels[6], 
                  x2_intersection+label_dist*Math.cos(angle3), 
                  y2_intersection+label_dist*Math.sin(angle3));
                AnswerString = "Corresponding Angles (congruent)";
            }
            if (random_pair == 4) //Angles 4 and 8
            {     
                C1CTX.fillText(angle_labels[3], 
                  x1_intersection+label_dist*Math.cos(angle4), 
                  y1_intersection+label_dist*Math.sin(angle4));
                C1CTX.fillText(angle_labels[7], 
                  x2_intersection+label_dist*Math.cos(angle4), 
                  y2_intersection+label_dist*Math.sin(angle4));
                AnswerString = "Corresponding Angles (congruent)";
            }
            break;
        case 3: //Alternate Interior Angles
            var random_pair = Math.floor((Math.random()*2)+1);
            if (random_pair == 1) //Angles 3 and 6
            {
                C1CTX.fillText(angle_labels[2], 
                  x1_intersection+label_dist*Math.cos(angle3), 
                  y1_intersection+label_dist*Math.sin(angle3));
                C1CTX.fillText(angle_labels[5], 
                  x2_intersection+label_dist*Math.cos(angle2), 
                  y2_intersection+label_dist*Math.sin(angle2));
                AnswerString = "Alternate Interior Angles (congruent)";    
            }
            if (random_pair == 2) //Angles 4 and 5
            {     
                C1CTX.fillText(angle_labels[3], 
                  x1_intersection+label_dist*Math.cos(angle4), 
                  y1_intersection+label_dist*Math.sin(angle4));
                C1CTX.fillText(angle_labels[4], 
                  x2_intersection+label_dist*Math.cos(angle1), 
                  y2_intersection+label_dist*Math.sin(angle1)); 
                AnswerString = "Alternate Interior Angles (congruent)";  
            }
            break;
        case 4: //Same-Side Interior Angles
            var random_pair = Math.floor((Math.random()*2)+1);
            if (random_pair == 1) //Angles 3 and 5
            {
                C1CTX.fillText(angle_labels[2], 
                  x1_intersection+label_dist*Math.cos(angle3), 
                  y1_intersection+label_dist*Math.sin(angle3));
                C1CTX.fillText(angle_labels[4], 
                  x2_intersection+label_dist*Math.cos(angle1), 
                  y2_intersection+label_dist*Math.sin(angle1)); 
                AnswerString = "Same-Side Interior Angles (supplementary)";       
            }
            if (random_pair == 2) //Angles 4 and 6
            {     
                C1CTX.fillText(angle_labels[3], 
                  x1_intersection+label_dist*Math.cos(angle4), 
                  y1_intersection+label_dist*Math.sin(angle4));
                C1CTX.fillText(angle_labels[5], 
                  x2_intersection+label_dist*Math.cos(angle2), 
                  y2_intersection+label_dist*Math.sin(angle2));  
                AnswerString = "Same-Side Interior Angles (supplementary)";     
            }
            break;
        case 5: //Alternate Exterior Angles
            var random_pair = Math.floor((Math.random()*2)+1);
            if (random_pair == 1) //Angles 1 and 8            
            {
                C1CTX.fillText(angle_labels[0], 
                  x1_intersection+label_dist*Math.cos(angle1), 
                  y1_intersection+label_dist*Math.sin(angle1));
                C1CTX.fillText(angle_labels[7], 
                  x2_intersection+label_dist*Math.cos(angle4), 
                  y2_intersection+label_dist*Math.sin(angle4)); 
                AnswerString = "Alternate Exterior Angles (congruent)";
            }
            if (random_pair == 2) //Angles 2 and 7
            {     
                C1CTX.fillText(angle_labels[1], 
                  x1_intersection+label_dist*Math.cos(angle2), 
                  y1_intersection+label_dist*Math.sin(angle2));
                C1CTX.fillText(angle_labels[6], 
                  x2_intersection+label_dist*Math.cos(angle3), 
                  y2_intersection+label_dist*Math.sin(angle3)); 
                AnswerString = "Alternate Exterior Angles (congruent)";          
            }
            break;
        default:
            alert("Problem with Question Type in draw_random_parallel_transversal");
            return;
    }

    C1CTX.restore(); //restore previous state of canvas settings

    //Update Question Output
    C2CTX.save(); //save current state of canvas settings
    C2CTX.font="30px serif";
    C2CTX.textAlign="left"; 
    C2CTX.textBaseline="alphabetic"; 

    var questionText = "What is the angle pair relationship?";
    var text1start = 10;
    C2CTX.fillText(questionText,10,30);
    C2CTX.restore(); //restore previous canvas settings

} //end draw_random_parallel_transversal

function update_answer_box( )
// Function to update the answer box canvas
{
    
    C2CTX.font="30px serif";
    C2CTX.textAlign="left"; 
    C2CTX.textBaseline="alphabetic"; 

    C2CTX.fillText(AnswerString,10,65);

} //end update_answer_box

</script>

</body>
</html>